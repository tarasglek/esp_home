substitutions:
  name: commandline_flag

esphome:
  name: $name
  platform: ESP8266
  board: esp8285

<<: !include  ../common.yaml

uart:
  rx_pin: RX
  baud_rate: 4800

sensor:
  - platform: cse7766
    update_interval: 1s
    current:
      name: "Current"
    voltage:
      name: "Voltage"
    power:
      name: "Power"
      id: power
  - platform: template
    name: "Hourly Average Power"
    id: hourly_power
    lambda: |-
      return id(power).state;
    update_interval: 60s
    filters:
      - sliding_window_moving_average:
          window_size: 60

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Physical Button"
    on_press:
      - switch.toggle: outlet

switch:
  - platform: gpio
    name: "Outlet ON/OFF"
    pin: GPIO12
    id: outlet
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    name: 'Schedule'
    id: schedule
    optimistic: true
    restore_state: true
    assumed_state: true #default to ON
status_led:
  pin:
    number: GPIO13

# Example configuration entry
interval:
  - interval: 1min
    then:
      if:
        condition:
          and:
          - switch.is_on: schedule
        then:
          if:
            condition:
            # wait till end of duty cycle when powering off
            - lambda: |-
                auto time = id(sntp_time).now();
                return (
                  (time.hour >= 8 && time.hour < 16) ||
                  (time.hour >= 3 && time.hour < 4) ||
                        time.hour >= 21
                );
            then:
            - switch.turn_on: outlet
            else:
              if:
                condition:
                # wait till end of duty cycle when powering off
                - lambda: |-
                    return (id(power).state < 10); 
                then:
                - switch.turn_off: outlet
