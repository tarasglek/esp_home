# Config from https://community.home-assistant.io/t/4-channel-relay-esp8266-wifi-board-working-with-esphome/120594/48
# curl -X POST http://gate/switch/relay1/turn_off
substitutions:
  name: commandline_flag

esphome:
  name: $name
  platform: ESP8266
  board: esp8285
  esp8266_restore_from_flash: true

<<: !include  ../common.yaml

globals:
   - id: open_timeout
     type: time_t
     restore_value: yes
     initial_value: '0'

uart:
  baud_rate: 115200 # speed to STC15L101EW
  tx_pin: GPIO1
  rx_pin: GPIO3

text_sensor:
  - platform: template
    name: "Open Until"
    id: open_timeout_sensor

script:
  - id: bump_open_timeout
    then:
      - lambda: |-
          time_t t = id(sntp_time).now().timestamp + 60 * 30;
          id(open_timeout) = t;
          ESP_LOGD("decision", "The value of sensor is: %s", ctime(&t));
          id(schedule_tick).execute();
  - id: update_open_timeout_sensor
    then:
      - lambda: |-
          id(open_timeout_sensor).publish_state(ctime(&id(open_timeout) ));
  - id: schedule_tick
    then:
      - lambda: |-
          if (id(open_for_30min).state) {
            id(update_open_timeout_sensor).execute();
          }
          if (id(automatic).state && id(gate).state == id(open_for_30min).state)
            id(gate).toggle();
switch:
  - platform: template
    name: 'Gate(ON=closed)'
    id: gate
    optimistic: true
    restore_state: true
  - platform: template
    name: 'Open for 30min'
    id: open_for_30min
    turn_on_action:
    - script.execute: bump_open_timeout
    turn_off_action:
    - script.execute: bump_open_timeout
    lambda: |-
      auto timestamp = id(sntp_time).now().timestamp;
      return timestamp < id(open_timeout);
  - platform: template
    name: 'Automatic Mode(ON=automatic)'
    id: automatic
    optimistic: true
    restore_state: true
    turn_off_action:
    - switch.turn_off: gate
    - lambda: |-
        time_t t = id(sntp_time).now().timestamp - 1;
        id(open_timeout) = t;
    turn_on_action:
    - script.execute: schedule_tick
  - platform: template
    name: 'relay1'
    id: relay1
    turn_on_action:
      - uart.write: [0xA0, 0x01, 0x01, 0xA2]
    turn_off_action:
      - uart.write: [0xA0, 0x01, 0x00, 0xA1]
    optimistic: true
  - platform: template
    name: 'relay2'
    id: relay2
    turn_on_action:
      - uart.write: [0xA0, 0x02, 0x01, 0xA3]
    turn_off_action:
      - uart.write: [0xA0, 0x02, 0x00, 0xA2]
    optimistic: true
# logging
debug:
web_server:
  port: 80
  css_include: gate.css

prometheus:

interval:
- interval: 1s
  then:
    if:
      condition:
        # Same syntax for is_off
        switch.is_on: gate
      then:
        - switch.turn_on: relay1
        - delay: 50ms
        - switch.turn_on: relay2
      else:
        - switch.turn_off: relay1
        - delay: 50ms
        - switch.turn_off: relay2
- interval: 1s
  then:
    - script.execute: schedule_tick
