# Add a pulse mode to run for 60min(during schedule)
# add prometheus alert to trigger it if <8hours in past week
substitutions:
  name: commandline_flag

esphome:
  name: $name
  platform: ESP8266
  board: esp8285
  esp8266_restore_from_flash: true

globals:
   - id: run_timeout
     type: time_t
     restore_value: yes
     initial_value: '0'
   - id: hush_timeout
     type: time_t
     restore_value: yes
     initial_value: '0'

<<: !include  ../common.yaml

switch:
  - platform: gpio
    name: pump
    pin: GPIO12
    id: pump
  - platform: template
    name: 'Schedule'
    id: schedule
    optimistic: true
    restore_state: true
    assumed_state: true
    turn_off_action:
    - switch.turn_off: pump
  - platform: template
    name: 'Run for 60min'
    id: toggle_run_timeout
    turn_on_action:
    - script.execute: bump_run_timeout
    turn_off_action:
    - script.execute: bump_run_timeout
    lambda: |-
      // gets current state of switch
      return id(sntp_time).now().timestamp < id(run_timeout);
  - platform: template
    name: 'Hush for 60min'
    id: toggle_hush_timeout
    turn_on_action:
    - script.execute: bump_hush_timeout
    turn_off_action:
    - script.execute: bump_hush_timeout
    lambda: |-
      // gets current state of switch
      return id(sntp_time).now().timestamp < id(hush_timeout);
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Physical On/Off"
    on_press:
      - switch.toggle: pump

text_sensor:
  - platform: template
    name: "Run Until"
    id: run_timeout_sensor
  - platform: template
    name: "Hush Until"
    id: hush_timeout_sensor

sensor:
  - platform: dht
    pin: 14
    model: SI7021
    temperature:
      id: temperature
      name: "temperature"
    humidity:
      name: "humidity"
      id: humidity
    update_interval: 10s

script:
  - id: bump_run_timeout
    then:
      - lambda: |-
          time_t t = id(sntp_time).now().timestamp + 60 * 60;
          id(run_timeout) = t;
          id(schedule_tick).execute();
  - id: bump_hush_timeout
    then:
      - lambda: |-
          time_t t = id(sntp_time).now().timestamp + 60 * 60;
          id(hush_timeout) = t;
          id(schedule_tick).execute();
  - id: update_timeout_sensor
    then:
      - lambda: |-
          id(run_timeout_sensor).publish_state(ctime(&id(run_timeout)));
          id(hush_timeout_sensor).publish_state(ctime(&id(hush_timeout)));

  - id: schedule_tick
    then:
      - lambda: |-
          auto time = id(sntp_time).now();
          auto timestamp = time.timestamp;
          bool pump_on = id(pump).state;
          int temp_threshold = 5;
          bool isRunTime = (time.hour >= 6 && time.hour < 16) || (time.hour >= 21 && time.hour <= 23);
          bool is_hush_timeout = timestamp < id(hush_timeout);
          bool pump_on_from_timeout = timestamp < id(run_timeout);

          if (pump_on_from_timeout || is_hush_timeout) {
            id(update_timeout_sensor).execute();
          }

          if (id(schedule).state) {
            bool run_pump = pump_on_from_timeout && isRunTime && !is_hush_timeout;
            if (id(pump).state != run_pump) {
              id(pump).toggle();
            }
            if (!run_pump && id(temperature).state > 20) {
              id(bump_run_timeout).execute();
              return;
            }
          }
interval:
  - interval: 1s
    then:
    - script.execute: schedule_tick
