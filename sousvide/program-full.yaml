# TODO:
# * create virual switches: UP and DOWN
# * these would use a lambda to increase/decrease a global var
# * that var would then be used in on_value
# * add a virtual sensor to show the global value
# * inject some html to control it 

esphome:
  name: sousvide
  platform: ESP8266
  board: esp8285

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sousvide Fallback Hotspot"

captive_portal:

# Enable Home Assistant API
api:

ota:
# enable http
http_request:
  useragent: esphome/sousvide
  timeout: 10s

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Toggle"
    on_press:
      - switch.toggle: heater

switch:
  - platform: gpio
    name: heater
    pin: GPIO12
    id: heater
  - platform: template
    name: 'Smoker Vent(ON=open)'
    id: vent
    turn_on_action:
      - http_request.post:
          url: http://smoker/switch/ventonopen/turn_on
    turn_off_action:
      - http_request.post:
          url: http://smoker/switch/ventonopen/turn_off
    optimistic: true
  - platform: template
    name: 'Automatic Smoker Vent Mode(ON=automatic)'
    id: automatic_vent
    optimistic: true
    restore_state: true
# temp sensor
dallas:
  - pin: 14
    update_interval: 10s
# Individual sensors
sensor:
  - platform: dallas
    index: 0
    name: temperature
    id: temperature
    # update_interval: 60s
    # in a trigger:
    on_value:
      if:
        condition:
          sensor.in_range:
            id: temperature
            above: 60
        then:
          - switch.turn_off: heater
          - if:
              condition:
                switch.is_on: automatic_vent
              then:
              - switch.turn_off: vent
        else:
          - switch.turn_on: heater
          - if:
              condition:
                switch.is_on: automatic_vent
              then:
              - switch.turn_on: vent
          # - switch.turn_on: heater
# logging
debug:
logger:
  level: DEBUG
web_server:
  port: 80

prometheus:

